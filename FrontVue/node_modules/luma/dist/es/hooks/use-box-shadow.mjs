import { distance, progress, mix, easeIn } from 'popmotion';
import { useContext } from 'react';
import { color } from 'style-value-types';
import { LightContext } from '../components/Light.mjs';
import { shadowLength } from '../utils/shadow-length.mjs';

var numShadows = 5;
var maxSpread = 5;
var zeroPoint = { x: 0, y: 0 };
var calcDistance = function (x, y) { return distance(zeroPoint, { x: x, y: y }); };
function useBoxShadow(layerZ, shadowColor) {
    if (shadowColor === void 0) { shadowColor = "rgba(0,0,0,1)"; }
    var _a = useContext(LightContext), x = _a.x, y = _a.y, z = _a.z, minOpacity = _a.minOpacity, maxOpacity = _a.maxOpacity, diffusion = _a.diffusion;
    var targetXLength = shadowLength(x, layerZ);
    var targetYLength = shadowLength(y, layerZ);
    var targetDistance = calcDistance(targetXLength, targetYLength);
    var zProgress = progress(0, z, layerZ);
    var parsedColor = color.parse(shadowColor);
    parsedColor.alpha = mix(maxOpacity, minOpacity, zProgress);
    var colorString = color.transform(parsedColor);
    var targetSpread = mix(0, -maxSpread, diffusion);
    console.log(targetSpread);
    var shadow = "";
    for (var i = 1; i <= numShadows; i++) {
        var p = progress(0, numShadows, i);
        var easedP = easeIn(p);
        var xLength = mix(0, targetXLength, easedP);
        var yLength = mix(0, targetYLength, easedP);
        var spread = mix(0, targetSpread, p);
        var blur_1 = mix(0, targetDistance, easedP);
        // TODO: Eased transpareny
        shadow += "".concat(xLength, "px ").concat(yLength, "px ").concat(blur_1, "px ").concat(spread, "px ").concat(colorString);
        if (i !== numShadows)
            shadow += ", ";
    }
    console.log(shadow);
    return shadow;
}
// export function useBoxShadow(
//     layerZ: number,
//     shadowColor: string = "rgba(0,0,0,1)"
// ) {
//     const { x, y, z, minOpacity, maxOpacity } = useContext(LightContext)
//     const xLength = shadowLength(x, layerZ)
//     const yLength = shadowLength(y, layerZ)
//     const zProgress = progress(0, z, layerZ)
//     const parsedColor = color.parse(shadowColor)
//     parsedColor.alpha = mix(maxOpacity, minOpacity, zProgress)
//     const colorString = color.transform!(parsedColor)
//     return `${xLength}px ${yLength}px ${layerZ}px ${colorString}`
// }

export { useBoxShadow };
