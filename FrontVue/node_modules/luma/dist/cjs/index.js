'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var popmotion = require('popmotion');
var styleValueTypes = require('style-value-types');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

var defaults = {
    x: -10,
    y: -20,
    z: 30,
    minOpacity: 0.1,
    maxOpacity: 0.3,
    diffusion: 0.5,
    intensity: 0.5,
};
var LightContext = React.createContext(defaults);
function Light(_a) {
    var children = _a.children, _b = _a.x, x = _b === void 0 ? defaults.x : _b, _c = _a.y, y = _c === void 0 ? defaults.y : _c, _d = _a.z, z = _d === void 0 ? defaults.z : _d, _e = _a.minOpacity, minOpacity = _e === void 0 ? defaults.minOpacity : _e, _f = _a.maxOpacity, maxOpacity = _f === void 0 ? defaults.maxOpacity : _f, _g = _a.diffusion, diffusion = _g === void 0 ? defaults.diffusion : _g, _h = _a.intensity, intensity = _h === void 0 ? defaults.intensity : _h;
    var context = React.useMemo(function () { return ({ x: x, y: y, z: z, diffusion: diffusion, intensity: intensity, minOpacity: minOpacity, maxOpacity: maxOpacity }); }, [x, y, z, diffusion, intensity, minOpacity, maxOpacity]);
    return (React__namespace.createElement(LightContext.Provider, { value: context }, children));
}

function shadowLength(angle, z) {
    return Math.tan(popmotion.degreesToRadians(angle * -1)) * z;
}

var numShadows = 5;
var maxSpread = 5;
var zeroPoint = { x: 0, y: 0 };
var calcDistance = function (x, y) { return popmotion.distance(zeroPoint, { x: x, y: y }); };
function useBoxShadow(layerZ, shadowColor) {
    if (shadowColor === void 0) { shadowColor = "rgba(0,0,0,1)"; }
    var _a = React.useContext(LightContext), x = _a.x, y = _a.y, z = _a.z, minOpacity = _a.minOpacity, maxOpacity = _a.maxOpacity, diffusion = _a.diffusion;
    var targetXLength = shadowLength(x, layerZ);
    var targetYLength = shadowLength(y, layerZ);
    var targetDistance = calcDistance(targetXLength, targetYLength);
    var zProgress = popmotion.progress(0, z, layerZ);
    var parsedColor = styleValueTypes.color.parse(shadowColor);
    parsedColor.alpha = popmotion.mix(maxOpacity, minOpacity, zProgress);
    var colorString = styleValueTypes.color.transform(parsedColor);
    var targetSpread = popmotion.mix(0, -maxSpread, diffusion);
    console.log(targetSpread);
    var shadow = "";
    for (var i = 1; i <= numShadows; i++) {
        var p = popmotion.progress(0, numShadows, i);
        var easedP = popmotion.easeIn(p);
        var xLength = popmotion.mix(0, targetXLength, easedP);
        var yLength = popmotion.mix(0, targetYLength, easedP);
        var spread = popmotion.mix(0, targetSpread, p);
        var blur_1 = popmotion.mix(0, targetDistance, easedP);
        // TODO: Eased transpareny
        shadow += "".concat(xLength, "px ").concat(yLength, "px ").concat(blur_1, "px ").concat(spread, "px ").concat(colorString);
        if (i !== numShadows)
            shadow += ", ";
    }
    console.log(shadow);
    return shadow;
}
// export function useBoxShadow(
//     layerZ: number,
//     shadowColor: string = "rgba(0,0,0,1)"
// ) {
//     const { x, y, z, minOpacity, maxOpacity } = useContext(LightContext)
//     const xLength = shadowLength(x, layerZ)
//     const yLength = shadowLength(y, layerZ)
//     const zProgress = progress(0, z, layerZ)
//     const parsedColor = color.parse(shadowColor)
//     parsedColor.alpha = mix(maxOpacity, minOpacity, zProgress)
//     const colorString = color.transform!(parsedColor)
//     return `${xLength}px ${yLength}px ${layerZ}px ${colorString}`
// }

exports.Light = Light;
exports.LightContext = LightContext;
exports.useBoxShadow = useBoxShadow;
